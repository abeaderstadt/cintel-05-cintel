[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\nfrom shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg \nimport plotly.graph_objs as go\n\n# --------------------------------------------\n# Constants and reactive data setup\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 5\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# --------------------------------------------\n# --- reactive calculation (data logic) ---\n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic\n    temperature = round(random.uniform(-18, -16), 1)\n    humidity = round(random.uniform(60, 100), 1) \n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\n        \"temperature\": temperature,\n        \"humidity\": humidity,\n        \"timestamp\": timestamp\n    }\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    return deque_snapshot, df, latest_dictionary_entry\n\n# --------------------------------------------\n# --- layout and sidebar section ---\n# --------------------------------------------\n\nui.page_opts(title=\"Antarctic Lab: Temp + Humidity Dashboard\", fillable=True)\n# Sidebar is typically used for user interaction/information\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Polar Monitoring Lab \u2744\ufe0f\", class_=\"text-center\")\n    ui.p(\"A demonstration of Real-time Antarctic climate conditions.\", class_=\"text-center\",)\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\"GitHub Source\", href=\"https://github.com/abeaderstadt/cintel-05-cintel\", target=\"_blank\",)\n    # Uncomment when hosted\n    # ui.a(\"GitHub App\", href=\"https://abeaderstadt.github.io/cintel-05-cintel/\", target=\"_blank\")\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"https://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\n# --------------------------------------------\n# --- Value boxes and latest reading section ---\n# --------------------------------------------\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"sun\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temperature']} C\"\n\n        \"Real-time Antarctic Temperature\"\n\n\n    with ui.value_box(\n        showcase=icon_svg(\"droplet\"),\n        theme=\"bg-gradient-cyan-blue\",\n    ):\n        \"Current Humidity\"\n    \n        @render.text\n        def display_humidity():\n            \"\"\"Get the latest reading and return a humidity string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['humidity']} %\"\n\n        \"Real-time Antarctic Humidity\"\n\n    with ui.value_box(\n        showcase=icon_svg(\"clock\"),\n        theme=\"bg-gradient-purple-indigo\",\n    ):\n        \"Current Time\"\n\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\n    \"Real-time Antarctic Timestamp\"\n\n# --------------------------------------------\n# --- DataFrame display section ---\n# --------------------------------------------\n\n#with ui.card(full_screen=True, min_height=\"40%\"):\nwith ui.card(full_screen=True):\n    ui.card_header(\"Most Recent Readings\")\n\n    @render.data_frame\n    def display_df():\n        \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n        pd.set_option('display.width', None) \n        return render.DataGrid( df,width=\"100%\")\n    \n# --------------------------------------------\n# --- Charts section ---\n# --------------------------------------------\n\nwith ui.card():\n    ui.card_header(\"Temperature Over Time\")\n\n    @render_plotly\n    def display_temp_plot():\n        # Fetch from the reactive calc function\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n        # Ensure the DataFrame is not empty before plotting\n        if not df.empty:\n            # Convert the 'timestamp' column to datetime for better plotting\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n            fig = go.Figure()\n            # Temperature line\n            fig.add_trace(go.Scatter(\n                x=df[\"timestamp\"],\n                y=df[\"temperature\"],\n                mode=\"lines+markers\",\n                name=\"Temperature\",\n                line=dict(color=\"#FF5733\"),\n            ))\n\n        # Trend line\n        if len(df) >= 2:\n            x_vals = list(range(len(df)))\n            slope, intercept, *_ = stats.linregress(x_vals, df[\"temperature\"])\n            trend = [slope * x + intercept for x in x_vals]\n\n            fig.add_trace(go.Scatter(\n                x=df[\"timestamp\"],\n                y=trend,\n                mode=\"lines\",\n                name=\"Temp Trend\",\n                line=dict(color=\"#900C3F\", dash=\"dash\")\n            ))\n\n            fig.update_layout(\n                xaxis_title=\"Time\",\n                yaxis_title=\"Temperature (\u00b0C)\",\n                plot_bgcolor=\"#FDFEFE\",\n                paper_bgcolor=\"#FBFCFC\",\n                font=dict(color=\"#1B2631\"),\n                title_font=dict(size=20),\n                transition=dict(duration=500)\n            )\n\n            return fig\n        \nwith ui.card():\n    ui.card_header(\"Humidity Over Time\")\n\n    @render_plotly\n    def display_humidity_plot():\n        deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n        if not df.empty:\n            df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n            fig = go.Figure()\n\n            fig.add_trace(go.Scatter(\n                x=df[\"timestamp\"],\n                y=df[\"humidity\"],\n                mode=\"lines+markers\",\n                name=\"Humidity\",\n                line=dict(color=\"#3498DB\"),\n            ))\n\n            fig.update_layout(\n                xaxis_title=\"Time\",\n                yaxis_title=\"Humidity (%)\",\n                plot_bgcolor=\"#EBF5FB\",\n                paper_bgcolor=\"#EAF2F8\",\n                font=dict(color=\"#154360\"),\n                title_font=dict(size=20),\n                transition=dict(duration=500) \n            )\n\n            return fig", "type": "text"}]